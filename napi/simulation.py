# AUTOGENERATED! DO NOT EDIT! File to edit: ../003_simulation.ipynb.

# %% auto 0
__all__ = ['EPS', 'sequence_to_squiggle', 'get_target_signal']

# %% ../003_simulation.ipynb 2
import scrappy
import numpy as np


# %% ../003_simulation.ipynb 3
EPS=1e-6

# %% ../003_simulation.ipynb 4
def sequence_to_squiggle(sequence, model='squiggle_r94_rna'):
    '''
    sequence_to_squiggle convert a sequence to a squiggle signal


    Args:
        sequence (_type_): sequence which only contains A, C, G, T
        model (str, optional):  Defaults to 'squiggle_r94_rna'.

    Returns:
        numpy.array : squiggle signal
    '''

    signals = scrappy.sequence_to_squiggle(
        sequence,
        model=model,
        rescale=True).data(as_numpy=True, sloika=False)
    return signals


# %% ../003_simulation.ipynb 5
def get_target_signal(scrappy_signals,start=0, end=None,normalize=True):
    '''
    target_signal get the target signal from the raw scrappy signal


    Args:
        scrappy_signals (_type_): _description_
        start (_type_, optional): _description_. Defaults to None.
        end (_type_, optional): _description_. Defaults to None.
    '''
    if None is end:
        end = scrappy_signals.shape[0]
    t_signal = np.repeat(scrappy_signals[start:end, 0], np.ceil(
        scrappy_signals[start:end, 2]).astype(int))
    if normalize:
        return ((t_signal-t_signal.mean())/(t_signal.std()+EPS)).astype(np.double)
    else:
        return t_signal.astype(np.double)

