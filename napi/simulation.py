# AUTOGENERATED! DO NOT EDIT! File to edit: ../003_simulation.ipynb.

# %% auto 0
__all__ = ['sequence_to_squiggle', 'target_signals']

# %% ../003_simulation.ipynb 2
import scrappy
import numpy as np


# %% ../003_simulation.ipynb 3
def _squiggle_normalized(signals):
    '''
    :param signals:
    :return:
    '''
    normalized_signals = []
    for i in signals:
        dwell = int(np.ceil(i[2]))
        normalized_signals += [i[0]]*dwell

    normalized_signals = np.array(normalized_signals)
    normalized_signals = (normalized_signals - np.mean(normalized_signals))/(np.std(normalized_signals)+0.0000001)
    return normalized_signals


def sequence_to_squiggle(sequence, model='squiggle_r94_rna',normalize=True):
    '''
    :param sequence:
    :param model:
    :return:
    '''

    signals = scrappy.sequence_to_squiggle(
        sequence,
        model=model,
        rescale=True).data(as_numpy=True, sloika=False)
    if normalize:
        return _squiggle_normalized(signals)
    else:
        return signals


# %% ../003_simulation.ipynb 4
def target_signals(scrappy_signals, start, end=None, padding=2):
    '''
    target_signals zero-based

    [extended_summary]

    Args:
        scrappy_signals ([type]): [description]
        start ([type]): [description]
        end ([type]): [description]
    '''

    length, _ = scrappy_signals.shape
    if None is end:
        end = length
    target_sig = scrappy_signals[max(
        0, start-padding):min(length, end+padding)]
    return _squiggle_normalized(target_sig)

